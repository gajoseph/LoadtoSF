import configparser
import os
import logging
import time
import sys
config = configparser.RawConfigParser()
def getPropInstance( sdirPath, sfileName):

    fileDir = os.path.dirname(sdirPath)
    filename = os.path.join(fileDir, sfileName)
    config.read(filename)
    return config

def getPropDict(item):
    return dict(config.items(item))


def retun_file_content_asString( file_path):
    """
        This method reads an entire file and converts into a string
    :param fileName:
    :return: String as (filecontent)
    """
    if os.path.isfile(file_path):
        filecontents = open(file_path, 'r').readlines()
        return ' '.join(map(str, filecontents))
    else:
        return ''


def json_extract(obj, key):
    """Recursively fetch values from nested JSON."""
    arr = []

    def extract(obj, arr, key):
        """Recursively search for values of key in JSON tree."""
        if isinstance(obj, dict):
            for k, v in obj.items():
                if isinstance(v, (dict, list)):
                    extract(v, arr, key)
                elif k == key:
                    arr.append(v)
        elif isinstance(obj, list):
            for item in obj:
                extract(item, arr, key)
        return arr

    values = extract(obj, arr, key)
    return values




def __setLoggingInfo( __log_prop_dict):
    """
    __log_prop_dict: dict w/ log info
    private method
    """
    logFile = __log_prop_dict["logfilepath"] + sys.argv[0].split("/")[-1][0:-3] + "_" + os.getlogin() + "_" + time.strftime('%Y%m%d%H%M%S') + ".log"

    """
    LOGGING SETTINGS
    """
    logging.basicConfig(
        filename=logFile
        , level=logging.DEBUG
        , format=__log_prop_dict["log.format"]
        , datefmt=__log_prop_dict["log.date.format"]
    )

    root = logging.getLogger()
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.DEBUG)
    # ch.setLevel(logging.ERROR)
    formatter = logging.Formatter(__log_prop_dict["log.format"], datefmt=__log_prop_dict["log.date.format"])
    ch.setFormatter(formatter)
    root.addHandler(ch)
